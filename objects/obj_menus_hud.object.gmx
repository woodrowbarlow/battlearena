<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frame = 0;
subimage = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frame ++;
if (0.05 * frame &gt;= 1) {
    subimage ++;
    frame = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i, j, color;
var weapon_sprites;
weapon_sprites[0] = spr_menus_hud_weap_melee;
weapon_sprites[1] = spr_menus_hud_weap_auto_rifle;
weapon_sprites[2] = spr_menus_hud_weap_shotgun;
weapon_sprites[3] = spr_menus_hud_weap_acid_gun;
weapon_sprites[4] = spr_menus_hud_weap_seeker_rocket;

draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fnt_tiny);
draw_set_color(c_white);

// PLAYER 1

// draw the heart that indicates current HP
draw_sprite(spr_menus_hud_bigheart_2, -1, 32, 448);
draw_sprite_ext(spr_menus_hud_bigheart_1, -1, 32, 448,
    player_inst_ids[0].character_health / 100.0,
    player_inst_ids[0].character_health / 100.0,
    0, c_white, 1);

// draw the hearts that indicate remaining lives
for (i = 0; i &lt; player_inst_ids[0].character_lives - 1; i++) {
    draw_sprite(spr_menus_hud_heart, subimage + i, 52 + (i*16), 468);
}

// draw the weapons to indicate currently selected weapon
for(i = 0; i &lt; array_length_1d(player_inst_ids[0].weapon_ammos); i++) {
    if (player_inst_ids[0].weapon_held == i) {
        color = c_white;
    }
    else {
        color = c_black;
    }
    draw_sprite_ext(weapon_sprites[i], -1, 64 + 20 * i, 444,
        0.75, 0.75, 0, color, 1);
}

// draw the ammo bars
for(i = 0; i &lt; array_length_1d(player_inst_ids[0].weapon_ammos); i++) {
    if (player_inst_ids[0].weapon_ammos[i] &gt;= 0) {
        draw_text(70 + 20 * i,450,string(player_inst_ids[0].weapon_ammos[i]));
    }
}

// PLAYER 2

// draw the heart that indicates current HP
draw_sprite(spr_menus_hud_bigheart_2, -1, 608, 448);
draw_sprite_ext(spr_menus_hud_bigheart_1, -1, 608, 448,
    player_inst_ids[1].character_health / 100.0,
    player_inst_ids[1].character_health / 100.0,
    0, c_white, 1);

// draw the hearts that indicate remaining lives
for (i = 0; i &lt; player_inst_ids[1].character_lives - 1; i++) {
    draw_sprite(spr_menus_hud_heart, subimage + i, 592 - (i*16), 468);
}

// draw the weapons to indicate currently selected weapon
for(i = 0; i &lt; array_length_1d(player_inst_ids[1].weapon_ammos); i++) {
    if (player_inst_ids[1].weapon_held == i) {
        color = c_white;
    }
    else {
        color = c_black;
    }
    draw_sprite_ext(weapon_sprites[i], -1, 490 + 20 * i, 444,
        0.75, 0.75, 0, color, 1);
}

// draw the ammo bars
for(i = 0; i &lt; array_length_1d(player_inst_ids[1].weapon_ammos); i++) {
    if (player_inst_ids[1].weapon_ammos[i] &gt;= 0) {
        draw_text(496 + 20 * i,450,string(player_inst_ids[1].weapon_ammos[i]));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
